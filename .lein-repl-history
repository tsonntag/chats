 (def db chats.models.schema/db-spec)
(quit)
 (require 'chats.models.schema)
 (use '(lobos connectivity core schema))
 (def db chats.models.schema/db-spec)
 (open-global db)
(migrate)
 (open-global db)
(migrate)
(create
   (table :customers              ; Create a table named customers
      (integer :id :primary-key)  ; With an integer primary key
      (varchar :firstname 75)))   ; and a varchar first name
(close-global)
 (open-global db)
(create
   (table :customers              ; Create a table named customers
      (integer :id :primary-key)  ; With an integer primary key
      (varchar :firstname 75)))   ; and a varchar first name
(quit)
(require 'lobos.core)
(lobos.core/migrate)
(lobos.core/rollback)
(lobos.core/migrate)
(quit)
 (require 'lobos.core)
 (lobos.core/migrate)
(pst *e)
(quit)
 (lobos.core/migrate)
(require 'lobos.core)
 (lobos.core/migrate)
(pst *e)
(quit)
(require 'lobos.core)
 (lobos.core/migrate)
(use 'korma.db)
(select :chats)
(require '[korma.core :as k]))
(require '[korma.core :as k])
(k/select :chats)
(k/insert :chats (values [{:name "foo"}]))
(k/insert :chats (k/values [{:name "foo"}]))
(k/select :chats)
(require 'chats.models.schema :reload)
(require '[chats.models.schema :as s] :reload)
(s/insert-chat "foo2")
(pst *e)
(k/insert chats  (values [{:name "foo"}]))
(k/insert chats  (k/values [{:name "foo"}]))
(require '[chats.models.schema :as s] :reload)
(s/insert-chat "foo2")
(s/chats)
(require 'chats.routes.home)
(s/chats)
(require 'chats.routes.home)
(require 'chats.models.chat)
(require 'chats.routes.home)
(require 'chats.models.chat :reload)
(require 'chats.routes.home)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(chats.models.chat/all)
(for [c  (chats.models.chat/all)) c)
(for [c  (chats.models.chat/all)] c)
(for [c  (chats.models.chat/all)] (:name c))
(for [c  (chats.models.chat/all)] [:h2 (:name c)])
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(use 'chats.repl)
(start-server)
(require 'chats.routes.home :reload)
(require 'chats.models.schema :reload)
(require 'chats.routes.home :reload)
(require 'chats.models.schema :reload)
(require 'chats.routes.home :reload)
(quit)
(require 'chats.models.schema :reload)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(quit)
(require 'lobos.core)
(pst *e)
(require 'lobos.connectivity)
(pst *e)
(require 'lobos.core)
(require 'lobos.connectivity :reload)
(require 'lobos.config)
(require 'lobos.connectivity :reload)
(pst *e)
(quit)
(use '(lobos connectivity core schema))
(pst *e=
(pst *e)
(require 'lobos.connectivity)
(require 'lobos.connectivity :reload)
(pst *e)
(require 'lobos.connectivity.jdbc-1 :reload)
(require 'lobos.connectivity.jdbc-2 :reload)
(quit)
(use '(lobos connectivity core schema))
(require 'lobos.connectivity :reload)
(quit)
(use '(lobos connectivity core schema))
(require 'lobos.connectivity :reload)
(require 'lobos.connectivity)
(require 'lobos.connectivity :reload)
(use '(lobos connectivity core schema))
(migrate)
(quit)
(use '(lobos connectivity core schema))
(migrate)
(quit)
(use '(lobos connectivity core schema))
(migrate)
(quit)
(pst *e)
(use '(lobos connectivity core schema))
(migrate)
(pst *e)
(require 'korma.db :reload)
(pst *e)
(quit)
(require 'chats.views.layout :reload)
(pst *e)
(require 'hiccup.page :reload)
(hiccup.page/html5)
(require 'hiccup.page :reload)
(require 'chats.views.layout :reload)
(require '[hiccup.page :refer [html5]] :reload)
(require 'hiccup.page :reload)
(hiccup.page/html5
 2)
(quit)
(require 'hiccup.page :reload)
(hiccup.page/html5 1)
(require 'chats.views.layout :reload)
(quit)
(ns chats.views.layout
  (:require
    [hiccup.page :refer [foo]]
    [hiccup.bootstrap.page :refer [include-bootstrap]]))
(html5 1)
(require 'chats.views.layout :reload)
(quit)
(clojure-version)
(quit)
(require 'chats.models.schema)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(start-server)
(use 'chats.repl)
(start-server)
(quit)
(use 'chats.repl)
(start-server)
(use 'lobos.core)
(migrate)
(use 'chats.repl)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(require 'lobos.config :reload)
(pst *e=
(require 'lobos.config :reload)
(pst *e)
(require 'chats.models.schema :reload)
(chats.models.schema/chats)
(require 'korma.core)
(require 'korma.db)
(korma.db/default-connection (System/getenv "DATABASE_URL"))
(chats.models.schema/chats)
(pst *e)
(korma.db/default-connection "postgresql://postgres:@localhost:5432/chats")
(chats.models.schema/chats)
(pst *e)
(korma.db/default-connection "jdbc:postgresql://postgres:@localhost:5432/chats")
(chats.models.schema/chats)
(quit)
(require 'korma.db)
(require 'lobos.config :reload)
(pst *e)
(require 'chats.models.schema :reload)
(chats.models.schema/chats)
(korma.db/default-connection (System/getenv "DATABASE_URL"))
(chats.models.schema/chats)
(korma.db/default-connection chats.models.schema/db-spec)
(chats.models.schema/chats)
(quit)
(chats.models.schema/chats)
(korma.db/default-connection)
(korma.db/default-connection chats.models.schema/db-spec)
(korma.db/default-connection "postgresql://postgres:@localhost:5432/chats")
(chats.models.schema/chats)
(URL.  "postgresql://postgres:@localhost:5432/chats")
(quit)
(chats.models.schema/chats)
(use 'chats.repl)
(start-server
)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(require 'chats.models.schemas :reload)
(require 'chats.models.schema :reload)
(pst *e)
(quit)
(require 'chats.models.schema :reload)
(quit)
(require 'chats.models.schema :reload)
chats.models.schema.url
chats.models.schema/url
chats.models.schema/db-url
chats.models.schema/db-conf
chats.models.schema/db-spec
(str/replace db-url #".*:" "http:"
)
(require 'clojure.string :as str)
(require 'clojure.string :as 'str)
(require '[clojure.string :as str])
(str/replace db-url #".*:" "http:")
(str/replace chats.models.schema/db-url #".*:" "http:")
(str/replace chats.models.schema/db-url #"[^:]*:" "http:")
(str/replace-first chats.models.schema/db-url #"[^:]*:" "http:")
(require 'chats.models.schema :reload)
 chats.models.schema/db-spec
(require 'chats.repl)
(use 'chats.repl)
(start-server)
(chats.models.schema/chats)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(chats.models.schema/chats)
(require 'chats.models.schema :reload)
(chats.models.schema/chats)
(quit)
 (require 'chats.models.schema :reload)
(chats.models.schema/chats)
(quit)
 (require 'chats.models.schema :reload)
 (chats.models.schema/chats)
(use 'chats.repl)
(start-server)
(quit)
(chats.models.schema/chats)
(quit)
(use 'chats.repl)
(start-server)
(quit)
(lobos.migration/migrations)
(lobos.migration/down)
(require 'lobos.migrations :reload)
(lobos.core/rollback)
(lobos.connectivity/open-global chats.models.schema/db-spec)
(lobos.core/rollback)
(lobos.core/print-pending)
(lobos.core/migrate)
(lobos.core/rollback)
(use 'chats.repl)
(start-server)
(quit)
(use 'chats.repl)
(start-server)
(quit)
(lobos.core/rollback)
(start-server)
(use 'chats.repl)
(start-server)
(lobos.core/rollback)
(lobos.connectivity/open-global chats.models.schema/db-spec)
(lobos.core/rollback)
(quit)
(use 'chats.repl)
(start-server)
(require 'chats.handler :reload)
(chats.handler/migrate(
(chats.handler/migrate)
 (lobos.core/print-pending)
 (lobos.migration/down)
 (lobos.migration/rollback)
 (lobos.core/rollback)
 (lobos.core/print-pending)
 (lobos.core/print-done)
 (lobos.core/migrate)
 (lobos.core/print-done)
 (lobos.core/print-pending)
 (lobos.connectivity/connection?)
 (lobos.connectivity/global-connections
)
 @lobos.connectivity/global-connections
 (lobos.core/print-pending)
(quit)
(lobos.core/migrate)
(chats.handler/mi)
(chats.handler/migr)
(require 'chats.handler)
(migrate)
(lobos.core/rollback)
(migrate)
(lobos.connectivity/close-global)
(migrate)
(lobos.core/print-pending)
(with-out-str (lobos.core/print-pending))
(with-out-str (lobos.core/print-done))
(lobos.migration/list-migrations-names)
(lobos.core/rollback)
(quit)
(migrate)
(require 'lobos.migrations :reload)
(migrate)
(require 'chats.handler :reload)
(migrate)
 (lobos.migration/list-migrations-names
)
(lobos.core/print-pending)
(lobos.core/print-done)
(require 'lobos.migration :reload)
(lobos.core/print-done)
(lobos.core/print-pending)
 (lobos.migration/list-migrations-names
)
 (lobos.migration/list-migrations-names)
(require 'lobos.core)
(lobos.core/migrate)
 (lobos.migration/list-migrations-names)
(require 'lobos.migrations :reload)
 (lobos.migration/list-migrations-names)
(quit)
 (lobos.migration/list-migrations-names)
(quit)
 (lobos.migration/list-migrations-names)
(require 'lobos.migrations :reload)
(lobos.migration/list-migrations-names)
(lobos.core/migrate)
 (open-global schema/db-spec)
(lobos.migration/list-migrations-names)
(lobos.core/migrate)
(lobos.migration/list-migrations-names)
  (lobos.core/migrate)
(require 'lobos.migrations :reload)
(lobos.migration/list-migrations-names)
(lobos.migration/*migrations-namespace*
)
lobos.migration/*migrations-namespace*
lobos.migration/*migrations-table*
lobos.migration/*src-directory*
lobos.migration/list-migrations
(lobos.migration/list-migrations)
(lobos.core/migrate)
(lobos.migration/list-migrations)
(require 'lobos.config :reload)
(lobos.migration/list-migrations)
(lobos.migration/list-migrations-names)
  (lobos.core/migrate)
(lobos.migration/list-migrations)
(require 'chars.handler :reload)
(migrate)
(lobos.migration/list-migrations)
(require 'lobos.core :reload)
(lobos.migration/list-migrations)
(require 'lobos.migration :reload)
(lobos.migration/list-migrations)
(lobos.core/migrate)
lobos.migration/migrations
@lobos.migration/migrations
(require 'lobos.migrations :reload)
@lobos.migration/migrations
(require 'chats.handler/migrate)
(chats.handler/migrate)
(lobos.connectivity/close-global)
(chats.handler/migrate)
(lobos.core/rollback)
(quit)
(migrate)
(lobos.core/rollback)
(main)
(-main)
(-main 3000)
(lobos.connectivity/close-global)
(-main 3000)
(lobos.core/rollback)
(lobos.connectivity/close-global)
(-main 3000)
(lobos.core/rollback)
(quit)
(-main 3000)
(lobos.core/rollback)
@lobos.core/migrations
lobos.migration/migrations
@lobos.migration/migrations
lobos.migration/list-migrations
lobos.migration/list-migrations-names
lobos.migration/list-migrations-names)
(lobos.migration/list-migrations-names)
(lobos.migration/migrations)
lobos.migration/migrations
@lobos.migration/migrations
(quit)
(-main 3000)
(migrate)
(require 'chats.handler :reload)
(migrate)
(-main 3000)
(quit)
@lobos.migration/migrations
(lobos.migration/pending-migrations)
(lobos.core/print-pending)
(quit)
(-main)
(-main 3000)
(require 'lobos.migrations :reload)
(-main 3000)
(require 'lobos.migrations :reload)
(quit)
(-main 3000)
(pst *e)
(-main 3000)
(pst *e)
(quit)
(migrate)
@lobos.migration/migration
@lobos.migration/migrations
(require 'lobos.migrations :reload)
@lobos.migration/migrations
(quit)
(migrate)
(lobos.core/rollback)
(migrate)
(lobos.core/rollback)
(quit)
(require '[chats.models.schema :as c])
(c/chats)
(migrate)
(c/chats)
(c/add-chat "foo")
(c/add-chat "bar")
(c/chats)
(sort :name (c/chats))
(sort-by :name (c/chats))
(require '[chats.models.schema :as c] :reload)
(c/chats)
(c/active-chats)
(require '[chats.models.schema :as c] :reload)
(now)
(Date.)
(java.util.Date.)
(require '[chats.models.schema :as c] :reload)
(c/all)
(c/chats*)
(require '[chats.models.schema :as c] :reload)
(c/all)
(pst *e)
(require '[chats.models.schema :as c] :reload)
(c/all)
(pst *e)
(require '[chats.models.schema :as c] :reload)
(c/all)
(c/active!)
(c/active)
(def a (first (c/all)))
(c/active? a)
(c/pause! a)
(c/active? a)
(c/active)
(use 'chats.repl)
(start-server)
(rollback)
(lobos.core/rollback)
(quit)
(use 'chats.repl)
(start-server
)
(chats.handler/migrate)
(lobos.core/rollback)
(chats.handler/migrate)
(lobos.core/rollback)
(require 'lobos.migrations :reload)
(chats.handler/migrate)
(require 'chats.models.chat :as chat)
(require '[chats.models.chat :as chat])
(chat/add! "foo")
(require '[chats.models.chat :as chat] :reload)
(chat/add! "foo")
(lobos.core/rollback)
(chats.handler/migrate)
(chat/add! "foo")
(chat/add! "bar")
(chat/all)
(require '[chats.views.chat :as v] :reload)
(v/all chat/all)
(v/all (chat/all))
(require '[chats.models.chat :as chat] :reload)
(chat/find "foo")
(chat/find "fo")
(chat/add-item {:chat_id 1 :require "req" :response "rsp"})
(chat/add-item! {:chat_id 1 :require "req" :response "rsp"})
(chat/add-item! {:chat_id 1 :request "req" :response "rsp"})
(quit)
