(icon-new)
(icon-new :title "foo")
(icon-new {:title "foo"})
(use 'chats.views.utils :reload)
(icon-new {:title "foo"})
(icon-new :title "foo")
(require 'chats.routes.gui :reload)
(quit)
(use 'chats.repl)
(pst *e)
(require 'chats.handler)
(require 'chats.handler :reload)
(require 'chats.routes.gui :reload)
(require 'chats.handler :reload)
(use 'chats.repl)
(require 'chats.routes.gui :reload)
(require 'chats.handler :reload)
(use 'chats.repl :reload)
(start-server)
(require '[chats.models.chat :as c])
(c/toggle-active! 2)
(c/active! 2)
(c/pause! 2)
(c/find 2)
(require '[chats.models.chat :as c])
(c/find 2)
(c/pause! 2)
(c/active! 2)
(java.sql.Date.)
(java.sql.Date. (System/currentTimeMillis))
(require '[chats.models.chat :as c])
(c/active! 2)
(c/pause! 2)
(c/toggle-active! 2)
(c/pause! 2)
(c/active! 2)
(c/active? 2)
(c/pause! 2)
(c/active? 2)
(require '[chats.models.chat :as c])
(c/toggle-active! 2)
(c/active? 2)
(c/pause! 2)
(c/active! 2)
(c/active? *1)
(c/pause! 2)
(c/active? *1)
(c/pause! 2)
(not (:finished-at *1))
(c/pause! 2)
(c/active? *1)
(c/pause! 2)
(*1)
*1
(c/active? *1)
(require '[chats.models.chat :as c])
(c/pause! 2)
(c/active? *1)
(c/pause! 2)
(:finished-at *1)
(not *1)
(c/pause! 2)
(c/now)
(c/pause! 2)
(c/active! 2)
(c/pause! 2)
(require '[chats.models.chat :as c])
(c/pause! 2)
(c/now)
(c/active! 2)
(c/pause! 2)
(use 'korma.core)
(update chat (where {:id 2}) (set-fields {:finished-at (now)}))
(update "chat" (where {:id 2}) (set-fields {:finished-at (now)}))
(update "chat" (where {:id 2}) (set-fields {:finished-at (c/now)}))
(c/now)
(update "chat" (where {:id 2}) (set-fields {:finished-at "2014-05-16T11:40:38.022-00:00"}))
(update "chat" (where {:id 2}) (set-fields {:finished-at "2014-05-16T11:40:38.022"}))
(c/now)
(update "chat" (where {:id 2}) (set-fields {:finished-at #inst "2014-05-16T11:52:16.975-00:00"}))
(class (c/now))
(update "chat" (where {:id 2}) (set-fields {:finished-at (c/now)}))
(require '[chats.models.chat :as c])
(class (c/now))
(require '[chats.models.chat :as c] :reload)
(class (c/now))
(c/now)
(require '[chats.models.chat :as c] :reload)
(c/now)
(class (c/now))
(update "chat" (where {:id 2}) (set-fields {:finished-at (c/now)}))
(doc reduce)
(require '[chats.models.chat :as c] :reload)
(c/item-count 2)
(require '[chats.models.chat :as c] :reload)
(c/item-count 2)
(require '[chats.models.chat :as c] :reload)
(c/item-count 2)
(require '[chats.routes.gui :as gui] :reload)
(gui/all)
(gui/-all)
(pst *e)
(c/item-count 2)
(c/item-count 1)
(c/all))
(c/all)
(c/item-count 5)
(c/item-count 2)
(c/item-count 1)
(map :id (c/all))
(use 'korma.core)
(require '[chats.models.chat :as c] :reload)
(map :id (c/all))
(c/item-count 2)
(c/item-count 1)
(c/item-count 4)
(c/item-count 6)
(c/item-count 2)
(c/item-count 3)
(c/item-count 4)
(c/item-count 5)
(c/item-count 1)
((comp :name size) {:name "bla"})
((comp :name count) {:name "bla"})
((comp :name) {:name "bla"})
((comp :count :name) {:name "bla"})
(count "bla")
((comp count :name) {:name "bla"})
(stop-server)
(start-server)
(quit)
(use 'chats.repl)
(pst *e)
(require '[chats.models.chat :as c])
(require '[chats.handler])
(require '[chats.routes.gui :as gui])
(require '[chats.routes.api :as api])
(start-server)
(use 'chats.repl)
(require 'chats.repl :reload)
(require 'chats.handler :reload)
(use 'chats.repl)
(require 'chats.handler :reload)
(require '[chats.routes.api :as api])
(require '[chats.routes.gui :as gui])
(require '[chats.routes.api :as api])
(require 'chats.handler :reload)
(require 'chats.repl :reload)
(use 'chats.repl)
(start-server
)
(require '[chats.routes.api :as api])
(api/list)
(require '[chats.routes.api :as api])
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(conj "aa" [ "b" "c"])
(c/all)
(for [[k v] {:a 1 :b 2}) (str k "=" v))
(for [[k v] {:a 1 :b 2}] (str k "=" v))
(for [[k v] {:a 1 :b 2}] (str (name k) "=" v))
(map (fn [[k v]] (str (name k) "=" v))  {:a 1 :b 2})
(for [[k v] {:a 1 :b 2}] (format "%s=%s" k v ))
(into {} '(:a 1))
(into {} :a 1)
(into {} [:a 1])
(into {} [[:a 1]])
(assoc {} :a 1)
(require '[chats.models.chat :as c])
(c/find :name "bar")
(quit)
(require 'chats.routes.chat :reload)
(require '[chats.models.chat :as :c] :reload)
(require '[chats.models.chat :as c] :reload)
(require 'chats.routes.chat :reload)
(require '[chats.models.chat :as c] :reload)
(use 'chats.repl)
(require '[chats.handler] :reload)
(require 'chats.routes.chat :reload)
(require '[chats.models.chat :as c] :reload)
(require 'chats.routes.chat :reload)
(require '[chats.models.chat :as c] :reload)
(require 'chats.routes.chat :reload)
(require '[chats.models.chat :as c] :reload)
(require 'chats.routes.chat :reload)
(require '[chats.models.chat :as c] :reload)
(require 'chats.routes.chat :reload)
(use 'chats.repl)
(require 'chats.handler :reload)
(require 'chats.routes.chat :reload)
(require 'chats.handler :reload)
(use 'chats.repl)
(require 'chats.routes.chat :reload)
(require '[chats.models.chat :as c] :reload)
(use 'chats.repl)
(require 'chats.handler :reload)
(use 'chats.repl)
(pst *e)
(use 'chats.repl :reload)
(start-server)
(require 'chats.routes.chat :reload)
(c/add-item! {:chat-id 7 :request "hi"})
(c/add-item! {:chat_id 7 :request "hi"})
(require '[chats.models.chat :as c] :reload)
(c/find-item :id 9 :response [not= nil])
not=
(c/find-item :id 9 :response [= nil])
(c/find-item :id 9 :responsenil)
(c/find-item :id 9 :response nil)
(c/find-item :id 9 :response [= nil])
(c/find-item :id 9 :response [not= nil])
(c/find-item :id 9 :response nil)
(c/find-item :id 9)
(c/find-item :id 9 :response [not= nil])
(c/find-item :id 9 :response [not= 'goo'])
(c/find-item :id 9 :response [not= nil])
(require '[chats.models.chat :as c] :reload)
(c/find-item :id 9 :response [not= nil])
(c/find-item :id 9 :response [= nil])
(require '[chats.models.chat :as c] :reload)
(chat/all)
(c/all)
(pst *e)
(chat/all)
(require '[chats.models.chat :as c] :reload)
(chat/all)
(c/all)
(c/find-item :id 11)
(c/find-item :id "11")
(quit)
(require 'lein.repl)
(require 'chats.repl)
(require 'chats.handler :reload)
(require 'chats.routes.chat :reload)
(require 'chats.handler :reload)
(require 'chats.repl)
(use 'chats.repl)
(use 'chat.repl)
(use 'chats.repl)
(require 'chats.repl :reload)
(use 'chats.repl)
(start-server)
(quit)
(use 'chats.repl)
(start-server)
(require '[chats.models.chat :as c] :reload)
(c/find :name nam)
(c/find :name name)
(let [name "foo"]  (c/find :name name))
(require '[chats.routes.gui :as gui] :reload)
(require '[chats.routes.api :as api] :reload)
(api/create "foo")
(api/init "foo")
(api/create "fo")
(api/init "foo")
(api/-create "fo")
(#'chats.routes.api/-create "fo")
(#'chats.routes.api/-create "fo" true)
(require '[chats.routes.api :as api] :reload)
(#'chats.routes.api/-create "fo" true)
(api/init "foo")
(require '[chats.routes.api :as api] :reload)
(api/init "foo")
(use 'korma.core)
(def responded (where :responded [not= nil]))
(def responded (where {:responded [not= nil]}))
(pst *e)
(defn responded [q]  (where q {:responded [not= nil]}))
(select* :chats)
(-> (select* :chats) responded)
(-> (select* :chats) (responded) )
(-> (select* :chats) (responded) (select))
(-> (select* :chat) (responded) (select))
(defn responded [q]  (where q {:response [not= nil]}))
(-> (select* :chat) (responded) (select))
(defn items [id] (-> (select* :chat-item (where {:chat_id id})))
)
(defn items [id] (-> (select* :chat-item) (where {:chat_id id})))
(-> (items 1) (responded) (select))
(-> (items 14) (responded) (select))
(-> (items 15) (responded) (select))
(-> (items 15) (select))
(defn items [id] (-> (select* :chat-item) (where {:chat_id id})))
(items 15)
(dry-run items 15)
(dry-run (items 15))
(items 6)
(-> (items 6) (select))
(-> (items 6) (responded) (select))
(-> (items 10) (responded) (select))
(defn items [id] (-> (select* :chat-item) (where {:chat_id id})))
(-> (items 6) (select))
(select (items 6)
)
(-> (items 10) (responded) (select))
(defn items [id] (-> (select* :chat-item) (where {:chat_id id})))
(defn responded [q]  (where q {:response [not= nil]}))
(defmacro items [chat-id & forms]
  `(select chat-item
           (where {:chat-id ~chat-id})
           ~@forms))
(defmacro not-responded []
  `(where {:response nil}))
(items 6 (not-responded))
(not-responded )
(defmacro items [chat-id & forms]
  `(select chat-item
           (where {:chat-id ~chat-id})
           ~@forms))
(defn not-responded [query]
  (where query {:response nil}))
(items 6 (not-responded))
(defmacro items [chat-id & forms]
  `(select :chat-item
           (where {:chat-id ~chat-id})
           ~@forms))
(defmacro items [chat-id & forms]
(items 6 (not-responded))
(defmacro items [chat-id & forms]
  `(select :chat-item
           (where {:chat_id ~chat-id})
           ~@forms))
(items 6 (not-responded))
(items 10 (not-responded))
(items 10)
(items 6)
(quit)
(use 'chats.repl)
(require 'chats.handler :reload)
(require '[chats.routes.api :as api] :reload)
(quit)
(use 'chats.repl)
(require 'chats.handler :reload)
(require 'chats.models.chat :reload)
(require 'chats.handler :reload)
(use 'chats.repl)
(use 'chats.repl :reload)
(start-server)
(require '[chats.models.chat :refer :all] :reload)
(find-item :id 20)
(quit)
(require '[chats.models.chat :refer :all] :reload)
(find-chat)
(use 'chats.handler)
(use 'chats.handler :reload)
(use 'chats.repl :reload)
(start-server
8080)
(start-server)
(find-chat :name "5")
(find-item :id 22)
(find-item :id 23)
(find-item :id 44)
(find-item :id 22 [not= nil])
(find-item :id 22 :response [not= nil])
(find-item  :response [not= nil])
(find-item  :response [= nil])
(find-item  :response [not= nil])
(find-item  :response [= nil])
(find-item  (responded))
(require '[chats.models.chat :refer :all] :reload)
(find-item {:id 14})
(find-item {:id 14} (responded))
(find-item {:id 14} (not-responded))
(find-item {:id 22} (not-responded))
(find-item {:id 22} (responded))
(stop-server
)
(stop-server)
(stop-server
)
(start-server)
(quit)
(use 'chat.repl)
(use 'chats.repl)
(start-server)
(stop-server)
(quit)
(use 'chats.repl)
(require '[chats.models.chat :as c] :reload)
(require '[chats.routes.api :as api] :reload)
(require '[chats.routes.gui :as gui] :reload)
(c/chats)
(c/item-(c/find-item {:id 22})
(c/find-item {:id 22})
(c/item-responded! {:id 22})
(c/find-item {:id 22})
*1
(c/item-obsolete! *1)
(require '[chats.models.chat :as c] :reload)
(require '[chats.routes.gui :as gui] :reload)
(require '[chats.routes.api :as api] :reload)
(start-server)
(c/find-item {:id 27})
(c/find-item {:id 26})
(c/item-obsolete! *1)
(c/find-chat {:id 12})
(c/find-chat :id 12)
(chat-item *1)
(:chat-item *1)
(c/items)
(c/items (c/for-chat {:id 12}))
(c/items (c/for-chat {:id 12}) (c/not-responded))
(c/poll 25 200 #(first  (c/items (c/for-chat {:id 12}) (c/not-responded))))
(#'chats.routes.api/poll 25 200 #(first  (c/items (c/for-chat {:id 12}) (c/not-responded))))
(require '[chats.routes.api :as api] :reload)
(c/item-responded! {:id 22})
quit
(use 'chats.repl)
(start-server)
(require '[chats.models.chat :refer :all] :reload)
(items)
(items (for-chat {:id 12})
=
)
(items (for-chat {:id 12}))
(items (for-chat {:id 12}) (not-responded)
)
(require '[clojure.string :as str])
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..?{15}")
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..{15}")
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..")
(partition 4 "sssssssssssfsdjfsdjfksdfsdf")
(interleave " " *1)
(partition 4 "sssssssssssfsdjfsdjfksdfsdf")
(interleave " " *1)
(map mapcat (partition 4 "sssssssssssfsdjfsdjfksdfsdf"))
( mapcat (partition 4 "sssssssssssfsdjfsdjfksdfsdf"))
( map concat (partition 4 "sssssssssssfsdjfsdjfksdfsdf"))
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..")
(quit)
(use 'chats.repl)
(quit)
(use 'chats.repl)
(require '[chats.handler] :reload)
(require '[chats.routes.api] :reload)
(require '[chats.handler] :reload)
(use 'chats.repl)
(use 'chats.repl :reload)
(start-server)
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..")
(require '[clojure.string :as str])
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..")
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..?")
(macroexpand-1 '(-> r a b))
(macroexpand-1 '(-> r a (b)))
(macroexpand-1 '(-> r (a) (b)))
(require '[chats.handler] :as h])
(require '[chats.handler :as h])
(require '[chats.handler :as h] :reload)
(app)
(app {})
(require '[chats.handler :as h] :reload)
(app {})
(require '[chats.handler :as h] :reload)
(app {})
(h/app {})
((h/with-header h/app "foo" "bar") {})
(require '[chats.handler :as h] :reload)
(h/app {})
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..?")
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"ss")
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..{4}")
(str/split "sssssssssssfsdjfsdjfksdfsdf" #"..?{4}")
(re-seq "sssssssssssfsdjfsdjfksdfsdf" #"..?{4}")
(re-seq #".." "sssssssssssfsdjfsdjfksdfsdf")
(re-seq #"..?" "sssssssssssfsdjfsdjfksdfsdf")
(re-seq #"..?{5}" "sssssssssssfsdjfsdjfksdfsdf")
(re-seq #"..?{4}" "sssssssssssfsdjfsdjfksdfsdf")
(re-seq #".....?" "sssssssssssfsdjfsdjfksdfsdf")
(re-seq #"..?" "123123123123")
(re-seq #"...?" "123123123123")
(re-seq #"...?" "1231231231234")
(re-seq #"..." "1231231231234")
(re-seq #"...+" "1231231231234")
(re-seq #"...?" "1231231231234")
(re-seq #"..." "1231231231234")
(re-seq #"..?" "1231231231234")
(re-seq #"...?" "1231231231234")
(re-seq #"..+" "1231231231234")
(re-seq #"...?" "1231231231234")
(re-seq #"..{0,4}" "1231231231234")
(re-seq #"..{0,3}" "1231231231234")
(str/join " " *1)
(quit)
(use 'chats.repl)
(require 'chats.handler :reload)
(use 'chats.repl)
(use 'chats.repl :reload)
(start-server)
(ifn? "bla")
