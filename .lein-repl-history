(require 'chats.repl :reload)
(chats.repl/start-server)
(chats.repl/stop-server)
(require 'chats.models.db :reload)
(require 'lobos.config :reload)
(require 'lobos.migrations)
(lobos.core/migrate
)
(pst *e)
(lobos.migrations/create-chats)
(pst *e)
(lobos.migration/*migrations-table*)
lobos.migration/*migrations-table*
(lobos.migration/list-migrations)
(lobos.migration/migrations)
lobos.migration/migrations
@lobos.migration/migrations
(migrate)
(lobos.core/migrate)
(require 'lobos.migrations :reload)
(lobos.core/migrate)
(pst *e=
)
(pst *e)
(lobos.core/migrate)
(pst *e)
(lobos.migrations/create-chats chats.models.db/db)
chats.models.db/db
(lobos.migrations/create-chats)
(lobos.migration/up lobos.migrations/create-chats)
(lobos.migration/up lobos.migrations/create-chats chats.models.db/db)
(class lobos.migrations/create-chats)
(lobos.migration/up lobos.migrations/create-chats)
(require 'lobos.helpers :reload)
(lobos.migration/up lobos.migrations/create-chats)
(lobos.core/migrate)
(lobos.migration/up lobos.migrations/create-chats)
(quit)
(require 'chats.repl)
(use 'chats.repl)
(require 'lobos.core)
(lobos.core/migrate)
(require 'lobos/config)
(require 'lobos.config)
(lobos.core/migrate)
(require 'chats.models.db)
(require 'lobos.config)
(lobos.core/migrate)
(pst *e)
(lobos.connectivity/open-global)
(lobos.connectivity/open-global chats.models.db/db)
(lobos.core/migrate)
(pst *e)
(use '(lobos connectivity core schema))
(create table :foos (integer :id))
(create (table :foos (integer :id)))
(def db chats.models.db/db)
(open-global db)
(quit)
(use '(lobos connectivity core schema))
(migrate)
(require 'chats.models.db)
(require 'lobos.config)
(migrate)
(def db chats.models.db/db)
(open-global db)
(migrate)
(create (table :users (integer :id :unique)))
(pst *e)
(lobos.core/debug)
(lobos.core/set-debug-level :sql)
(create (table :users (integer :id :unique)))
(require 'lobos.internal)
(lobos.schema/schema)
lobos.schema/schema
lobos.schema/schema?
(lobos.schema/schema?)
(create db (table :users (integer :id :unique)))
db
(open-global db)
(lobos.connectivity/connection?)
(lobos.connectivity/connection)
(lobos.connectivity/connection db)
lobos.connectivity/default-connection
lobos.connectivity/global-connections
@lobos.connectivity/global-connections
lobos.connectivity/find-connections
lobos.connectivity/find-connection
(quit9
)
(quit)
(require 'lobos.config)
(require 'lobos.core :as l)
(require '[lobos.core :as l])
(l/migrate)
(require '[lobos.migration :as lm])
(lm/pending-migrations)
(require '[chats.models.schema :as schema])
(lm/pending-migrations schema/db-spec)
(defcommand pending-migrations []
  (lm/pending-migrations schema/db-spec sname))
(l/defcommand pending-migrations []
 (lm/pending-migrations schema/db-spec sname))
(pending-migrations)
(lobos.connectivity/with-connection)
(use '(lobos connectivity core schema))
(def db {{:classname "org.postgresql.Driver"
      :subprotocol "postgresql"
      :user "postgres" :subname "//localhost:5432/chats"}))
(def db {:classname "org.postgresql.Driver"
      :user "postgres" :subname "//localhost:5432/chats"}))
(open-global db)
(quit)
(use '(lobos connectivity core schema))
(def db {:classname "org.postgresql.Driver"
      :user "postgres" :subname "//localhost:5432/chats"}))
(open-global db)
(def db {:classname "org.postgresql.Driver"
      :user "postgres" :password "" :subname "//localhost:5432/chats"}))
(open-global db)
(def db {:classname "org.postgresql.Driver"
:subprotocol "postgresql"
      :user "postgres" :subname "//localhost:5432/chats"})
(open-global db)
(create (table :users (integer :id :unique)))
(quit)
(use '(lobos connectivity core schema))
(def db {:classname "org.postgresql.Driver"
:subprotocol "postgresql"
      :user "postgres" :subname "//localhost:5432/chats"})
(open-global db)
(create (table :users (integer :id :unique)))
(pst *e)
(quit)
(require '[clojure.java.classpath :as cp])
(cp/classpath)
(doseq [c (cp/classpath)] (println c))
(require 'lobos.migrations)
(quit)
(require 'lobos.migrations)
(quit)
(require 'lobos.migrations)
(require 'lobos.config))
(require 'lobos.config)
(quit)
 (require 'lobos.migrations)
 (require 'lobos.config)
 (require 'chats.models.schema)
(quit)
(require 'chats.models.schema)
(pst *e)
(quit)
 (require 'lobos.config)
 (require 'lobos.migrations)
(lobos.core/run)
(require 'lobos.core)
(lobos.core/run)
(lobos.core/migrate)
(use '(lobos connectivity core schema))
(create
   (table :customers              ; Create a table named customers
      (integer :id :primary-key)  ; With an integer primary key
      (varchar :firstname 75)))   ; and a varchar first name
(quit)
(use '(lobos connectivity core schema))
(require 'chats.models.schema)
(open-global chats.models.schema/db-spec)
(migrate)
(create
   (table :customers              ; Create a table named customers
      (integer :id :primary-key)  ; With an integer primary key
      (varchar :firstname 75)))   ; and a varchar first name
(migrate)
(pst *e)
(require 'lobos.migrations)
(pst *e)
(require 'lobos.migrations)
(require 'lobos.migrations :reload)
(require 'lobos.migrations)
(quit)
(use '(lobos connectivity core schema))
(require 'chats.models.schema)
(def db chats.models.schema/db-spec)
(create
   (table :customers              ; Create a table named customers
      (integer :id :primary-key)  ; With an integer primary key
      (varchar :firstname 75)))   ; and a varchar fi
(migrate)
(open-global db)
(migrate)
(quit)
 (require 'chats.models.schema)
(def db chats.models.schema/db-spec)
(use '(lobos connectivity core schema))
(open-global db)
(migrate)
(require 'lobos.migrations)
(quit)
(use '(lobos connectivity core schema))
(require 'lobos.config)
(require 'lobos.migrations)
(migrate)
 (require 'chats.models.schema)
 (def db chats.models.schema/db-spec)
(open-global db)
(migrate)
 (def db chats.models.schema/db-spec)
(open-global db)
 (def db chats.models.schema/db-spec)
(quit)
 (require 'chats.models.schema)
 (use '(lobos connectivity core schema))
 (def db chats.models.schema/db-spec)
 (open-global db)
(migrate)
 (open-global db)
(migrate)
(create
   (table :customers              ; Create a table named customers
      (integer :id :primary-key)  ; With an integer primary key
      (varchar :firstname 75)))   ; and a varchar first name
(close-global)
 (open-global db)
(create
   (table :customers              ; Create a table named customers
      (integer :id :primary-key)  ; With an integer primary key
      (varchar :firstname 75)))   ; and a varchar first name
(quit)
(require 'lobos.core)
(lobos.core/migrate)
(lobos.core/rollback)
(lobos.core/migrate)
(quit)
 (require 'lobos.core)
 (lobos.core/migrate)
(pst *e)
(quit)
 (lobos.core/migrate)
(require 'lobos.core)
 (lobos.core/migrate)
(pst *e)
(quit)
(require 'lobos.core)
 (lobos.core/migrate)
(use 'korma.db)
(select :chats)
(require '[korma.core :as k]))
(require '[korma.core :as k])
(k/select :chats)
(k/insert :chats (values [{:name "foo"}]))
(k/insert :chats (k/values [{:name "foo"}]))
(k/select :chats)
(require 'chats.models.schema :reload)
(require '[chats.models.schema :as s] :reload)
(s/insert-chat "foo2")
(pst *e)
(k/insert chats  (values [{:name "foo"}]))
(k/insert chats  (k/values [{:name "foo"}]))
(require '[chats.models.schema :as s] :reload)
(s/insert-chat "foo2")
(s/chats)
(require 'chats.routes.home)
(s/chats)
(require 'chats.routes.home)
(require 'chats.models.chat)
(require 'chats.routes.home)
(require 'chats.models.chat :reload)
(require 'chats.routes.home)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(chats.models.chat/all)
(for [c  (chats.models.chat/all)) c)
(for [c  (chats.models.chat/all)] c)
(for [c  (chats.models.chat/all)] (:name c))
(for [c  (chats.models.chat/all)] [:h2 (:name c)])
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(use 'chats.repl)
(start-server)
(require 'chats.routes.home :reload)
(require 'chats.models.schema :reload)
(require 'chats.routes.home :reload)
(require 'chats.models.schema :reload)
(require 'chats.routes.home :reload)
(quit)
(require 'chats.models.schema :reload)
(require 'chats.routes.home :reload)
(chats.routes.home/chats)
(quit)
(require 'lobos.core)
(pst *e)
(require 'lobos.connectivity)
(pst *e)
(require 'lobos.core)
(require 'lobos.connectivity :reload)
(require 'lobos.config)
(require 'lobos.connectivity :reload)
(pst *e)
(quit)
(use '(lobos connectivity core schema))
(pst *e=
(pst *e)
(require 'lobos.connectivity)
(require 'lobos.connectivity :reload)
(pst *e)
(require 'lobos.connectivity.jdbc-1 :reload)
(require 'lobos.connectivity.jdbc-2 :reload)
(quit)
(use '(lobos connectivity core schema))
(require 'lobos.connectivity :reload)
(quit)
(use '(lobos connectivity core schema))
(require 'lobos.connectivity :reload)
(require 'lobos.connectivity)
(require 'lobos.connectivity :reload)
(use '(lobos connectivity core schema))
(migrate)
(quit)
(use '(lobos connectivity core schema))
(migrate)
(quit)
(use '(lobos connectivity core schema))
(migrate)
(quit)
(pst *e)
(use '(lobos connectivity core schema))
(migrate)
(pst *e)
(require 'korma.db :reload)
(pst *e)
(quit)
(require 'chats.views.layout :reload)
(pst *e)
(require 'hiccup.page :reload)
(hiccup.page/html5)
(require 'hiccup.page :reload)
(require 'chats.views.layout :reload)
(require '[hiccup.page :refer [html5]] :reload)
(require 'hiccup.page :reload)
(hiccup.page/html5
 2)
(quit)
(require 'hiccup.page :reload)
(hiccup.page/html5 1)
(require 'chats.views.layout :reload)
(quit)
(ns chats.views.layout
  (:require
    [hiccup.page :refer [foo]]
    [hiccup.bootstrap.page :refer [include-bootstrap]]))
(html5 1)
(require 'chats.views.layout :reload)
(quit)
(clojure-version)
(quit)
(require 'chats.models.schema)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(start-server)
(use 'chats.repl)
(start-server)
(quit)
(use 'chats.repl)
(start-server)
(use 'lobos.core)
(migrate)
(use 'chats.repl)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(require 'lobos.config :reload)
(pst *e=
(require 'lobos.config :reload)
(pst *e)
(require 'chats.models.schema :reload)
(chats.models.schema/chats)
(require 'korma.core)
(require 'korma.db)
(korma.db/default-connection (System/getenv "DATABASE_URL"))
(chats.models.schema/chats)
(pst *e)
(korma.db/default-connection "postgresql://postgres:@localhost:5432/chats")
(chats.models.schema/chats)
(pst *e)
(korma.db/default-connection "jdbc:postgresql://postgres:@localhost:5432/chats")
(chats.models.schema/chats)
(quit)
(require 'korma.db)
(require 'lobos.config :reload)
(pst *e)
(require 'chats.models.schema :reload)
(chats.models.schema/chats)
(korma.db/default-connection (System/getenv "DATABASE_URL"))
(chats.models.schema/chats)
(korma.db/default-connection chats.models.schema/db-spec)
(chats.models.schema/chats)
(quit)
(chats.models.schema/chats)
(korma.db/default-connection)
(korma.db/default-connection chats.models.schema/db-spec)
(korma.db/default-connection "postgresql://postgres:@localhost:5432/chats")
(chats.models.schema/chats)
(URL.  "postgresql://postgres:@localhost:5432/chats")
(quit)
(chats.models.schema/chats)
(use 'chats.repl)
(start-server
)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(require 'chats.models.schemas :reload)
(require 'chats.models.schema :reload)
(pst *e)
(quit)
(require 'chats.models.schema :reload)
(quit)
(require 'chats.models.schema :reload)
chats.models.schema.url
chats.models.schema/url
chats.models.schema/db-url
chats.models.schema/db-conf
chats.models.schema/db-spec
(str/replace db-url #".*:" "http:"
)
(require 'clojure.string :as str)
(require 'clojure.string :as 'str)
(require '[clojure.string :as str])
(str/replace db-url #".*:" "http:")
(str/replace chats.models.schema/db-url #".*:" "http:")
(str/replace chats.models.schema/db-url #"[^:]*:" "http:")
(str/replace-first chats.models.schema/db-url #"[^:]*:" "http:")
(require 'chats.models.schema :reload)
 chats.models.schema/db-spec
(require 'chats.repl)
(use 'chats.repl)
(start-server)
(chats.models.schema/chats)
(chats.models.schema/db-spec)
chats.models.schema/db-spec
(chats.models.schema/chats)
(require 'chats.models.schema :reload)
(chats.models.schema/chats)
(quit)
 (require 'chats.models.schema :reload)
(chats.models.schema/chats)
(quit)
 (require 'chats.models.schema :reload)
 (chats.models.schema/chats)
(use 'chats.repl)
(start-server)
(quit)
(chats.models.schema/chats)
(quit)
(use 'chats.repl)
(start-server)
(quit)
(lobos.migration/migrations)
(lobos.migration/down)
(require 'lobos.migrations :reload)
(lobos.core/rollback)
(lobos.connectivity/open-global chats.models.schema/db-spec)
(lobos.core/rollback)
(lobos.core/print-pending)
(lobos.core/migrate)
(lobos.core/rollback)
(use 'chats.repl)
(start-server)
(quit)
(use 'chats.repl)
(start-server)
(quit)
(lobos.core/rollback)
(start-server)
(use 'chats.repl)
(start-server)
(lobos.core/rollback)
(lobos.connectivity/open-global chats.models.schema/db-spec)
(lobos.core/rollback)
(quit)
(use 'chats.repl)
(start-server)
(require 'chats.handler :reload)
(chats.handler/migrate(
(chats.handler/migrate)
 (lobos.core/print-pending)
 (lobos.migration/down)
 (lobos.migration/rollback)
 (lobos.core/rollback)
 (lobos.core/print-pending)
 (lobos.core/print-done)
 (lobos.core/migrate)
 (lobos.core/print-done)
 (lobos.core/print-pending)
 (lobos.connectivity/connection?)
 (lobos.connectivity/global-connections
)
 @lobos.connectivity/global-connections
