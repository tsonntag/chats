@lobos.core/migrations
lobos.migration/migrations
@lobos.migration/migrations
lobos.migration/list-migrations
lobos.migration/list-migrations-names
lobos.migration/list-migrations-names)
(lobos.migration/list-migrations-names)
(lobos.migration/migrations)
lobos.migration/migrations
@lobos.migration/migrations
(quit)
(-main 3000)
(migrate)
(require 'chats.handler :reload)
(migrate)
(-main 3000)
(quit)
@lobos.migration/migrations
(lobos.migration/pending-migrations)
(lobos.core/print-pending)
(quit)
(-main)
(-main 3000)
(require 'lobos.migrations :reload)
(-main 3000)
(require 'lobos.migrations :reload)
(quit)
(-main 3000)
(pst *e)
(-main 3000)
(pst *e)
(quit)
(migrate)
@lobos.migration/migration
@lobos.migration/migrations
(require 'lobos.migrations :reload)
@lobos.migration/migrations
(quit)
(migrate)
(lobos.core/rollback)
(migrate)
(lobos.core/rollback)
(quit)
(require '[chats.models.schema :as c])
(c/chats)
(migrate)
(c/chats)
(c/add-chat "foo")
(c/add-chat "bar")
(c/chats)
(sort :name (c/chats))
(sort-by :name (c/chats))
(require '[chats.models.schema :as c] :reload)
(c/chats)
(c/active-chats)
(require '[chats.models.schema :as c] :reload)
(now)
(Date.)
(java.util.Date.)
(require '[chats.models.schema :as c] :reload)
(c/all)
(c/chats*)
(require '[chats.models.schema :as c] :reload)
(c/all)
(pst *e)
(require '[chats.models.schema :as c] :reload)
(c/all)
(pst *e)
(require '[chats.models.schema :as c] :reload)
(c/all)
(c/active!)
(c/active)
(def a (first (c/all)))
(c/active? a)
(c/pause! a)
(c/active? a)
(c/active)
(use 'chats.repl)
(start-server)
(rollback)
(lobos.core/rollback)
(quit)
(use 'chats.repl)
(start-server
)
(chats.handler/migrate)
(lobos.core/rollback)
(chats.handler/migrate)
(lobos.core/rollback)
(require 'lobos.migrations :reload)
(chats.handler/migrate)
(require 'chats.models.chat :as chat)
(require '[chats.models.chat :as chat])
(chat/add! "foo")
(require '[chats.models.chat :as chat] :reload)
(chat/add! "foo")
(lobos.core/rollback)
(chats.handler/migrate)
(chat/add! "foo")
(chat/add! "bar")
(chat/all)
(require '[chats.views.chat :as v] :reload)
(v/all chat/all)
(v/all (chat/all))
(require '[chats.models.chat :as chat] :reload)
(chat/find "foo")
(chat/find "fo")
(chat/add-item {:chat_id 1 :require "req" :response "rsp"})
(chat/add-item! {:chat_id 1 :require "req" :response "rsp"})
(chat/add-item! {:chat_id 1 :request "req" :response "rsp"})
(quit)
(use 'chats.repl)
(start-server)
(require '[chats.models.chat :as chat] :reload)
(chat/all)
(require '[chats.views.chat :as v] :reload)
(stop-server)
(require 'chats.routes.home :reload)
(require '[chats.views.chat :as v] :reload)
(require 'chats.routes.home :reload)
(start-server)
(require 'clojure.string)
q
(clojure.string/capitalize :asdf)
(clojure.string/capitalize "asdf")
(require '[chats.views.chat :as v] :reload)
(v/prop-val {:name "foo"} :foo)
(require '[chats.views.chat :as v] :reload)
(v/prop-val {:name "foo"} :foo)
(v/prop-val {:name "foo"} :name)
(v/table [{:name "foo"}] [:name])
(v/prop-val {:name "foo"} :name)
(def chats (chats/all))
(def chats (chat/all))
chats
(v/table* chats [:name])
(require '[chats.views.chat :as v] :reload)
(v/table* chats :name)
(require '[chats.views.chat :as v] :reload)
(v/table* chats :name)
(pst *e)
(v/table chats :name)
(v/table chats :name :created-at)
(quit)
(use 'chats.repl)
(start-server)
(require '[chats.views.chat :as v] :reload)
(require '[chats.models.chat :as c] :reload)
(def chats (chat/all)
)
(def chats (c/all)
)
chats
(v/table chats :name)
(v/table chats v/link)
(v/prop-val (first chats) :name)
(v/prop-val (first chats) (v/link))
(v/prop-val (first chats) v/link)
(v/table chats v/link)
(v/table chats :name)
(v/table chats v/link)
(v/table chats :name)
(v/table chats :name :created-at)
(v/table chats :name size)
(v/table chats :name count)
(v/table chats :name ["Count" count])
(v/table chats v/link)
(require '[chats.views.chat :as v] :reload)
(v/table chats v/link)
(v/table chats :name ["Count" count])
(defmacro links [resource & links]
  [:ul.inline
     (for [link links]
        [:li (-> resource link)])])
(links "chats" new)
(macroexpand-1 '(links "chats" new))
(macroexpand '(links "chats" new))
(macroexpand '(links "chats" new foo))
(defmacro links [resource & links]
  [:ul.inline
     (for [l links]
        [:li l])])
(defmacro links [resource & links]
(macroexpand '(links "chats" new foo))
(defmacro links [resource & links]
  [:ul.inline
     (for [l links]
        [:li (str "link-" l)])])
(macroexpand '(links "chats" new foo))
(defmacro links [resource & links]
  [:ul.inline
     (for [l links]
        [:li (resolve (str "link-" l))])])
(macroexpand '(links "chats" new foo))
(defmacro links [resource & links]
  [:ul.inline
     (for [l links]
        [:li (resolve (symbol (str "link-" l)))])])
(macroexpand '(links "chats" new foo))
(resolve "struct")
(resolve (symbol "struct"))
(use 'chats.chats.utils)
(use 'chats.views.utils)
(macroexpand '(links "chats" new foo))
(use 'chats.views.utils)
(macroexpand '(links "chats" new foo))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" new foo))
(macroexpand '(links "chats" new (delete 1)))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" new (delete 1)))
(macroexpand-1 '(links "chats" new (delete 1)))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" new (delete 1)))
(macroexpand-1 '(links "chats" new delete (delete 1)))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" new delete (delete 1)))
(pst *e)
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" new delete (delete 1)))
(-> "chats" 'a)
(-> "chats" '(a b))
(macroexpand-1 '(-> "chats" '(a b)))
(macroexpand-1 '(-> "chats" (a b)))
(macroexpand-1 '(-> "chats" a))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" new delete (delete 1)))
(macroexpand-1 '(links "chats" new ))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" new ))
(macroexpand '(links "chats" new ))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" new ))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" new ))
(macroexpand-1 (-> "chats" new))
(macroexpand-1 '(-> "chats" new))
(macroexpand '(links "chats" new ))
(macroexpand-1 '(links "chats" new ))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" new ))
(macroexpand-1 '(links "chats" new ))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" new ))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" new ))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" delete ))
(macroexpand-1 '(links "chats" (delete 1) ))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" (delete 1) ))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" (delete 1) ))
(macroexpand-1 '(links "chats" new ))
(macroexpand '(links "chats" new ))
(macroexpand '(links "chats" (delete 1) ))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" (delete 1) ))
(seq '(a b))
(seq 'a)
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" (link-delete 1) ))
(macroexpand '(links "chats" link-new ))
(macroexpand-1 '(links "chats" link-new ))
(macroexpand-1 '(-> "chats" link-new))
(macroexpand-1 '(-> "chats" (link-delete 1)))
(use 'chats.views.utils :reload)
(macroexpand-1 '(-> "chats" (link-delete 1)))
(macroexpand '(links "chats" link-new ))
(macroexpand '(links "chats" (link-delete 1) ))
(macroexpand '(links "chats" (link-delete 1) link-new))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" (link-delete 1) link-new))
(macroexpand '(links "chats" (link-delete 1)))
(macroexpand '(links "chats" link-delete))
(macroexpand-1 '(links "chats" link-delete))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" link-delete))
(macroexpand-1 '(links "chats" link-new))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" link-new))
(macroexpand '(links "chats" link-new))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" link-new))
(macroexpand '(links "chats" (link-delete 1)))
(macroexpand-1 '(links "chats" (link-delete 1)))
(links "chats" (link-delete 1))
(links "chats" link-new)
(pst *e)
(use 'chats.views.utils :reload)
(links "chats" link-new)
(use 'chats.views.utils :reload)
(links "chats" link-new)
(use 'chats.views.utils :reload)
(links "chats" link-new)
(macroexpand-1 '(links "chats" (link-delete 1)))
(macroexpand-1 '(links "chats" link-new))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" link-new))
(macroexpand-1 '(links "chats" (link-delete 1)))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" (link-delete 1)))
(links "chats" link-new)
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" (link-delete 1)))
(macroexpand-1 '(links "chats" link-new))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" link-new))
(use 'chats.views.utils :reload)
(macroexpand-1 '(links "chats" link-new))
(links "chats" link-new)
(macroexpand '(links "chats" link-new))
(links "chats" link-new)
(macroexpand '(links "chats" link-new))
(use 'chats.views.utils :reload)
(macroexpand '(links "chats" link-new))
(links "chats" link-new)
(links "chats" link-new (link-delete 1))
(use 'chats.views.utils :reload)
(links "chats" link-new (link-delete 1))
(use 'chats.views.utils :reload)
(icon-new)
(icon-new :title "foo")
(icon-new {:title "foo"})
(use 'chats.views.utils :reload)
(icon-new {:title "foo"})
(icon-new :title "foo")
(require 'chats.routes.gui :reload)
(quit)
(use 'chats.repl)
(pst *e)
(require 'chats.handler)
(require 'chats.handler :reload)
(require 'chats.routes.gui :reload)
(require 'chats.handler :reload)
(use 'chats.repl)
(require 'chats.routes.gui :reload)
(require 'chats.handler :reload)
(use 'chats.repl :reload)
(start-server)
(require '[chats.models.chat :as c])
(c/toggle-active! 2)
(c/active! 2)
(c/pause! 2)
(c/find 2)
(require '[chats.models.chat :as c])
(c/find 2)
(c/pause! 2)
(c/active! 2)
(java.sql.Date.)
(java.sql.Date. (System/currentTimeMillis))
(require '[chats.models.chat :as c])
(c/active! 2)
(c/pause! 2)
(c/toggle-active! 2)
(c/pause! 2)
(c/active! 2)
(c/active? 2)
(c/pause! 2)
(c/active? 2)
(require '[chats.models.chat :as c])
(c/toggle-active! 2)
(c/active? 2)
(c/pause! 2)
(c/active! 2)
(c/active? *1)
(c/pause! 2)
(c/active? *1)
(c/pause! 2)
(not (:finished-at *1))
(c/pause! 2)
(c/active? *1)
(c/pause! 2)
(*1)
*1
(c/active? *1)
(require '[chats.models.chat :as c])
(c/pause! 2)
(c/active? *1)
(c/pause! 2)
(:finished-at *1)
(not *1)
(c/pause! 2)
(c/now)
(c/pause! 2)
(c/active! 2)
(c/pause! 2)
(require '[chats.models.chat :as c])
(c/pause! 2)
(c/now)
(c/active! 2)
(c/pause! 2)
(use 'korma.core)
(update chat (where {:id 2}) (set-fields {:finished-at (now)}))
(update "chat" (where {:id 2}) (set-fields {:finished-at (now)}))
(update "chat" (where {:id 2}) (set-fields {:finished-at (c/now)}))
(c/now)
(update "chat" (where {:id 2}) (set-fields {:finished-at "2014-05-16T11:40:38.022-00:00"}))
(update "chat" (where {:id 2}) (set-fields {:finished-at "2014-05-16T11:40:38.022"}))
(c/now)
(update "chat" (where {:id 2}) (set-fields {:finished-at #inst "2014-05-16T11:52:16.975-00:00"}))
(class (c/now))
(update "chat" (where {:id 2}) (set-fields {:finished-at (c/now)}))
(require '[chats.models.chat :as c])
(class (c/now))
(require '[chats.models.chat :as c] :reload)
(class (c/now))
(c/now)
(require '[chats.models.chat :as c] :reload)
(c/now)
(class (c/now))
(update "chat" (where {:id 2}) (set-fields {:finished-at (c/now)}))
(doc reduce)
(require '[chats.models.chat :as c] :reload)
(c/item-count 2)
(require '[chats.models.chat :as c] :reload)
(c/item-count 2)
(require '[chats.models.chat :as c] :reload)
(c/item-count 2)
(require '[chats.routes.gui :as gui] :reload)
(gui/all)
(gui/-all)
(pst *e)
(c/item-count 2)
(c/item-count 1)
(c/all))
(c/all)
(c/item-count 5)
(c/item-count 2)
(c/item-count 1)
(map :id (c/all))
(use 'korma.core)
(require '[chats.models.chat :as c] :reload)
(map :id (c/all))
(c/item-count 2)
(c/item-count 1)
(c/item-count 4)
(c/item-count 6)
(c/item-count 2)
(c/item-count 3)
(c/item-count 4)
(c/item-count 5)
(c/item-count 1)
((comp :name size) {:name "bla"})
((comp :name count) {:name "bla"})
((comp :name) {:name "bla"})
((comp :count :name) {:name "bla"})
(count "bla")
((comp count :name) {:name "bla"})
(stop-server)
(start-server)
(quit)
(use 'chats.repl)
(pst *e)
(require '[chats.models.chat :as c])
(require '[chats.handler])
(require '[chats.routes.gui :as gui])
(require '[chats.routes.api :as api])
(start-server)
(use 'chats.repl)
(require 'chats.repl :reload)
(require 'chats.handler :reload)
(use 'chats.repl)
(require 'chats.handler :reload)
(require '[chats.routes.api :as api])
(require '[chats.routes.gui :as gui])
(require '[chats.routes.api :as api])
(require 'chats.handler :reload)
(require 'chats.repl :reload)
(use 'chats.repl)
(start-server
)
(require '[chats.routes.api :as api])
(api/list)
(require '[chats.routes.api :as api])
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(require '[chats.routes.api :as api] :reload)
(api/list)
(conj "aa" [ "b" "c"])
(c/all)
(for [[k v] {:a 1 :b 2}) (str k "=" v))
(for [[k v] {:a 1 :b 2}] (str k "=" v))
(for [[k v] {:a 1 :b 2}] (str (name k) "=" v))
(map (fn [[k v]] (str (name k) "=" v))  {:a 1 :b 2})
(for [[k v] {:a 1 :b 2}] (format "%s=%s" k v ))
(into {} '(:a 1))
(into {} :a 1)
(into {} [:a 1])
(into {} [[:a 1]])
(assoc {} :a 1)
(require '[chats.models.chat :as c])
(c/find :name "bar")
